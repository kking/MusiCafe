package kking.musicafe;

import android.content.Context;
import android.media.AudioManager;
import android.media.SoundPool;
import android.os.Build;
import android.util.Log;
import android.view.View;

import java.util.HashMap;

import kking.musicafe.fragment.PianoFragment;

/**
 * SoundPlayer: Wrapper class for generating audio.
 *
 * @author kking
 */
public class PianoSoundPool {

    private static final String TAG = "PianoSoundPool";

    private SoundPool mSoundPool;
    /** Stream IDs generated by the SoundPool. */
    private int[] mSoundIds;
    /** A mapping from given Button IDs to the stream IDs generated by the SoundPool. */
    private HashMap<Integer, Integer> mSoundMap;

    /**
     * precondition: rawIds and buttonIds should be parallel to each other
     */
    public PianoSoundPool(Context context, int maxStreams, int[] rawIds, int[] buttonIds) {
        // create SoundPool
        // old constructor is deprecated from API 21 (Lollipop)
        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {
            Log.i(TAG, "API > 21");
            // create a SoundPool with the given number of max streams
            mSoundPool = new SoundPool.Builder().setMaxStreams(maxStreams).build();
        }
        else {
            Log.i(TAG, "API < 21");
            // create a SoundPool using the connected device (headphones/speakers) for output
            mSoundPool = new SoundPool(maxStreams, AudioManager.STREAM_MUSIC, 0);
        }
        // load given raw IDs into SoundPool and store resulting stream IDs
        mSoundIds = new int[rawIds.length];
        for (int i = 0; i < rawIds.length; i++) {
            mSoundIds[i] = mSoundPool.load(context, rawIds[i], 1); // priority==1
        }
        // create a Map from the given Button IDs to the generated stream IDs
        mSoundMap = new HashMap<>();
        for (int i = 0; i < buttonIds.length; i++) {
            mSoundMap.put(buttonIds[i], mSoundIds[i]);
        }
    }

    public void play(View button) {
        Integer streamId = mSoundMap.get(button.getId()); // get .wav ID from Button mapping
        if (streamId != null) {
            mSoundPool.play(streamId, 1, 1, 1, 0, 1);
        }
        else {
            Log.e(TAG, "play: View ID does not have a mapping.");
        }
    }

    /** Relinquishes resources used through {@link PianoFragment#onDestroy()}. */
    public void destroy() {
        mSoundPool.release();
        mSoundPool = null;
    }

} // End of class SoundPlayer
